*Emacs Configuration* -by A7d
* package-archives
** melpa

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/" ) t)
(package-initialize)
#+END_SRC

* variables for modes
** display & input
*** description

    Basic display & inputs. Below varibles set:
- disable menu bar, tool bar, scrool bar, init splash screen
- display linumber mode, column mode, time, battery life, file size, hilight line, visual line
- disable backup files
- save cursor position
- auto revert file
- start with maximized frame
- auto complete parenthesis & hilight parenthesis ends

*** codes

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (toggle-frame-maximized)
    (display-battery-mode 1)
  )
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq inhibit-splash-screen t)
  (setq make-backup-files nil)
  ;(global-linum-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (display-time-mode 1)
  (setq column-number-mode t)
  (global-hl-line-mode 1)
  (electric-pair-mode 1)
  (show-paren-mode 1)
  (savehist-mode 1)
  (global-auto-revert-mode 1)
  (global-visual-line-mode 1)
  (size-indication-mode 1)
  (set-language-environment "UTF-8")
  (setq case-fold-search t) ;;I-Search case insensitive
  #+End_SRC

** Indentation
*** description
Setting tab width to 4
replacing tab with space

*** codes
  #+BEGIN_SRC emacs-lisp  
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4) ; or any other preferred value
  (defvaralias 'c-basic-offset 'tab-width)
  (c-set-offset 'innamespace 0)
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(c-basic-offset 4)
   '(c-comment-only-line-offset 0)
   '(c-default-style (quote ((c++-mode . "ellemtel") (c-mode . "linux"))))
   '(c-hanging-braces-alist
     (quote
      ((defun-open before after)
       (defun-close before after)
       (class-open before after)
       (block-close . c-snug-do-while)
       (statement-cont)
       (substatement-open after)
       (brace-list-open)
       (brace-entry-open)
       (extern-lang-open after)
       (namespace-open)
       (namespace-close)
       (module-open after)
       (composition-open after)
       (inexpr-class-open after)
       (inexpr-class-close before)
       (arglist-cont-nonempty))))
   '(c-indent-comments-syntactically-p t)
   '(c-offsets-alist
     (quote
      ((defun-block-intro . +)
       (func-decl-cont . +)
       (knr-argdecl-intro . +)
       (topmost-intro . 0)))))
  #+END_SRC

** winner mode
*** description
    winner mode for storing the window configurations
    Thanks to: [[https://www.emacswiki.org/emacs/WinnerMode][Emacs Wiki for winner mode]]

*** code
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

* installed packages
** org bullets
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
#+END_SRC
** auto-hilight-symbol
*** codes
#+BEGIN_SRC emacs-lisp
(require 'auto-highlight-symbol)
(global-auto-highlight-symbol-mode t)
(define-key auto-highlight-symbol-mode-map (kbd "M-p") 'ahs-backward)
(define-key auto-highlight-symbol-mode-map (kbd "M-n") 'ahs-forward)
(setq ahs-idle-interval 0) ;; if you want instant highlighting, set it to 0, but I find it annoying
(setq ahs-default-range 'ahs-range-whole-buffer) ;; highlight every occurence in buffer

;; inhibits highlighting in specific places, like in comments
(setq ahs-inhibit-face-list '(font-lock-comment-delimiter-face
                                font-lock-comment-face
                                font-lock-doc-face
                                font-lock-doc-string-face
                                font-lock-string-face))
#+END_SRC
** ace-window
*** code
#+BEGIN_SRC emacs-lisp
(require 'ace-window)
(global-set-key (kbd "<f12>") 'ace-window)
(setq aw-scope 'frame)
#+END_SRC
** golden-ratio
#+BEGIN_SRC emacs-lisp
(require 'golden-ratio)
(golden-ratio-mode 1)
(add-to-list 'golden-ratio-extra-commands 'ace-window) ;; active golden ratio when using ace-window
#+END_SRC
** company + company-irony + readline-complete
*** codes
#+BEGIN_SRC emacs-lisp
(global-company-mode t)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-minimum-prefix-length 1)
(setq company-idle-delay 0)

;; company-irony
;;(eval-after-load 'company
;;  '(add-to-list 'company-backends 'company-irony))

;;readline-complete
;;(setq explicit-shell-file-name "bash")
;;(setq explicit-bash-args '("-c" "export EMACS=; stty echo; bash"))
;;(setq comint-process-echoes t)
#+END_SRC
** helm + helm-swoop
*** description
Helm is an Emacs framework for incremental completions and narrowing selections. It provides an easy-to-use API for developers wishing to build their own Helm applications in Emacs, powerful search tools and dozens of already built-in commands providing completion to almost everything. It is a must-have for anyone using Emacs as a main work environment. Helm has been widely adopted by many Emacs power-users. It is available in Melpa and can be easily installed from the Emacs package manager. 

*** codes
#+BEGIN_SRC emacs-lisp
(require 'helm)
(helm-mode 1)

(global-set-key [(meta x)] 'helm-M-x)

;; F2 -- Files Menu
(define-prefix-command 'files-map)
(global-set-key (kbd "<f2>") 'files-map)
(define-key files-map [(f2)] 'helm-for-files)
(define-key files-map [(o)] 'helm-find-files)
(define-key files-map [(s)] 'save-some-buffers)
(define-key files-map [(b)] 'helm-buffers-list)
(define-key files-map [(c)] 'delete-window)
(define-key files-map [(k)] 'kill-buffer)
(define-key files-map [(x)] 'save-buffers-kill-terminal)

;; F3 -- Search Menu
(require 'helm-swoop)
(define-prefix-command 'search-map)
(global-set-key (kbd "<f3>") 'search-map)
(define-key search-map [(f3)] 'helm-swoop)
(define-key search-map [(a)] 'helm-multi-swoop-all)
(define-key global-map (kbd "C-\\") 'helm-resume)

(global-set-key [(f7)] 'helm-semantic)

(global-set-key (kbd "C-y") 'helm-show-kill-ring)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
;;(add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
#+END_SRC

** helm-gtags
*** codes
#+BEGIN_SRC emacs-lisp
;; Enable helm-gtags-mode
(require 'helm-gtags)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;; Set key bindings
(eval-after-load "helm-gtags"
  '(progn
     (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-find-tag)
     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
     (define-key helm-gtags-mode-map (kbd "M-}") 'helm-gtags-find-rtag)
     (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
     (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)))

#+END_SRC
** cscope + helm-cscope
*** codes
#+BEGIN_SRC emacs-lisp
(require 'xcscope)
(require 'helm-cscope)
;; Enable helm-cscope-mode
(add-hook 'c-mode-hook 'helm-cscope-mode)
(add-hook 'c++-mode-hook 'helm-cscope-mode)
;; Set key bindings
(eval-after-load "helm-cscope"
  '(progn
     (define-key helm-cscope-mode-map (kbd "M->") 'helm-cscope-find-global-definition)
     (define-key helm-cscope-mode-map (kbd "M-<") 'helm-cscope-pop-mark)))
;;     (define-key helm-cscope-mode-map (kbd "M-s") 'helm-cscope-find-this-symbol)
;;     (define-key helm-cscope-mode-map (kbd "M-g M-c") 'helm-cscope-find-called-function)
;;     (define-key helm-cscope-mode-map (kbd "M-g M-p") 'helm-cscope-find-calling-this-funtcion)))
#+END_SRC
** perforce (p4)
*** Key combo
 |-----------+---------------------------------|
 | key combo | effect                          |
 |-----------+---------------------------------|
 | C-x p e   | Perforce edit                   |
 |-----------+---------------------------------|

*** codes
#+BEGIN_SRC emacs-lisp
(require 'p4)
(setq p4-global-key-prefix (kbd "<f8>"))
(p4-set-client-name "a7-miata")
(p4-set-p4-port "ssl:ixin-cm-vmp4proxy:1999")
;(p4-set-p4-port "ssl:uscal-cm-p4-1:1666")
;; -diff
(defun command-line-diff (switch)
  (let ((file1 (pop command-line-args-left))
        (file2 (pop command-line-args-left)))
    (ediff file1 file2)))
(add-to-list 'command-switch-alist '("-diff" . command-line-diff))

;; -merge
(defun command-line-merge (switch)
  (let ((base (pop command-line-args-left))
        (sccs (pop command-line-args-left))
        (mine (pop command-line-args-left))
        (merg (pop command-line-args-left)))
   (ediff-merge-with-ancestor sccs mine base () merg)))
(add-to-list 'command-switch-alist '("-merge" . command-line-merge))
#+END_SRC

** iedit
*** codes
https://www.emacswiki.org/emacs/Iedit

#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC
** stickyfunc-enhance
*** codes
#+BEGIN_SRC emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
(semantic-mode 1)
(require 'stickyfunc-enhance)
#+END_SRC
* keybindings
** codes
#+BEGIN_SRC emacs-lisp
(global-set-key ["<f1> k"] 'describe-key)
(global-set-key [(f6)] 'eshell)
;(global-set-key ["<ctrl> <tab>"] 'other-window)
(global-set-key (kbd "<C-tab>") 'other-window)
(global-set-key (kbd "C-?") 'hippie-expand)
(global-set-key (kbd "M-D") 'backward-kill-word)
(global-set-key (kbd "DEL") 'backward-delete-char)
(global-set-key (kbd "C-z") 'replace-string)
(global-set-key (kbd "C-M-z") 'replace-regex)
(global-set-key (kbd "C-Z") 'count-matches)
(global-set-key [(ctrl a)] 'back-to-indentation)
;;(global-set-key (kbd "<prior>") 'beginning-of-defun)
;;(global-set-key (kbd "<next>") 'end-of-defun)
(global-set-key [(ctrl n)] 'goto-line)
(global-set-key [(ctrl h)] 'highlight-symbol-at-point )
(global-set-key (kbd "<C-%>") 'match-paren)
        
;; Mouse
(unless (display-graphic-p)
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode nil)
  )


#+END_SRC

* Themes
** exotica
Vibrant colored dark theme.

#+BEGIN_SRC emacs-lisp
;;(load-theme 'exotica t)
#+END_SRC

* Back to Basic
** key combo

   These are some basic key combo in emacs.

 |-----------+---------------------------------|
 | key combo | effect                          |
 |-----------+---------------------------------|
 | C-f       | forward char                    |
 | C-b       | backward char                   |
 | C-n       | next line                       |
 | C-p       | previous line                   |
 | C-a       | beginging of line               |
 | C-e       | end of line                     |
 | C-x [     | forward one page                |
 | C-x ]     | backward one page               |
 |-----------+---------------------------------|
 | M-f       | forward word                    |
 | M-b       | backward word                   |
 | M-m       | first non whitespace            |
 | M-}       | move beginging of a paragraph   |
 | M-{       | move beginging of a paragraph   |
 | M-a       | move beginging of a sentence    |
 | M-e       | move beginging of a sentence    |
 | M-<       | move to begining of buffer      |
 | M->       | move to end of buffer           |
 |-----------+---------------------------------|
 | C-M-f     | forward s-expression            |
 | C-M-b     | backward s-expression           |
 | C-M-d     | move down to a list             |
 | C-M-u     | move up out of list             |
 | C-M-n     | move to next list               |
 | C-M-p     | move to previous list           |
 | C-M-a     | move to begining of defun       |
 | C-M-e     | move to end of defun            |
 |-----------+---------------------------------|
 | C-v       | scroll down one page            |
 | M-v       | scroll up one page              |
 | C-M-v     | scroll down other window        |
 | C-M-S-v   | scroll up other window          |
 |-----------+---------------------------------|
 | C-x r m   | set a bookmark                  |
 | C-x r l   | list a bookmark                 |
 | C-x r b   | jump to a bookmark              |
 |-----------+---------------------------------|
 | C-x r n   | store number in resistor        |
 | C-x r s   | store region in resistor        |
 | C-x r SPC | store point in resistor         |
 | C-x r +   | increment content in resistor   |
 | C-x r j   | jump to resistor                |
 | C-x r i   | insert content of resistor      |
 | C-x r w   | store window config in resistor |
 | C-x r f   | store frameset in resistor      |
 |-----------+---------------------------------|
 | C-SPC     | mark the region                 |
 | C-u C-SPC | Jump to mark                    |
 | C-x C-x   | exchanges mark & point          |
 |-----------+---------------------------------|
 | M-h       | Mark Next paragraph             |
 | C-x h     | Mark whole buffer               |
 | C-M-h     | mark next defun                 |
 | C-x C-p   | mark next page                  |
 | M-@       | mark next word                  |
 | C-M-@     | mark next s expression          |
 |-----------+---------------------------------|


