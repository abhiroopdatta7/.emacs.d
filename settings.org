* Emacs Configuration 
  -by A7d
* package-archives
** melpa

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/" ) t)
(package-initialize)
#+END_SRC

* varibales for modes
** display & input
*** description

    Basic display & inputs. Below varibles set:
- disable menu bar, tool bar, scrool bar, init splash screen
- display linumber mode, column mode, time, battery life, file size, hilight line, visual line
- disable backup files
- save cursor position
- auto revert file
- start with maximized frame
- auto complete parenthesis & hilight parenthesis ends

*** codes

  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  ;(if (display-graphic-p)
    ;(tool-bar-mode -1) ;;; not using as this is for GUI mode of emacs
    ;(scroll-bar-mode -1) ;;; not using as this is for GUI mode of emacs
    ;(toggle-frame-maximized) ;;; not using this one any more as each time init.el is eavluated, frame is toggled
    ;(display-battery-mode 1) ;;;not using for terminal emacs
  ;)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq inhibit-splash-screen t)
  (setq make-backup-files nil)
  ;(global-linum-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (display-time-mode 1)
  (setq column-number-mode t)
  (global-hl-line-mode 1)
  (electric-pair-mode 1)
  (show-paren-mode 1)
  (savehist-mode 1)
  (global-auto-revert-mode 1)
  (global-visual-line-mode 1)
  (size-indication-mode 1)
  (set-language-environment "UTF-8")
  #+END_SRC

** Indentation
*** description
Setting tab width to 4
replacing tab with space

*** codes
  #+BEGIN_SRC emacs-lisp  
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4) ; or any other preferred value
  (defvaralias 'c-basic-offset 'tab-width)
  #+END_SRC

** winner mode

*** description
    winner mode for storing the window configurations
    Thanks to: [[https://www.emacswiki.org/emacs/WinnerMode][Emacs Wiki for winner mode]]

*** code
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

* installed packages

** org bullets
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
#+END_SRC

** helm
*** description
Helm is an Emacs framework for incremental completions and narrowing selections. It provides an easy-to-use API for developers wishing to build their own Helm applications in Emacs, powerful search tools and dozens of already built-in commands providing completion to almost everything. It is a must-have for anyone using Emacs as a main work environment. Helm has been widely adopted by many Emacs power-users. It is available in Melpa and can be easily installed from the Emacs package manager. 

*** codes
#+BEGIN_SRC emacs-lisp
(global-set-key [(meta x)] 'helm-M-x)
(global-set-key [(f7)] 'helm-semantic)
(global-set-key [(f2)] 'helm-for-files)
#+END_SRC
** cscope + helm-cscope
*** codes
#+BEGIN_SRC emacs-lisp
(require 'xcscope)
(require 'helm-cscope)
;; Enable helm-cscope-mode
(add-hook 'c-mode-hook 'helm-cscope-mode)
(add-hook 'c++-mode-hook 'helm-cscope-mode)
;; Set key bindings
(eval-after-load "helm-cscope"
  '(progn
     (define-key helm-cscope-mode-map (kbd "M-t") 'helm-cscope-find-symbol)
     (define-key helm-cscope-mode-map (kbd "M-r") 'helm-cscope-find-global-definition)
     (define-key helm-cscope-mode-map (kbd "M-g M-c") 'helm-cscope-find-called-function)
     (define-key helm-cscope-mode-map (kbd "M-g M-p") 'helm-cscope-find-calling-this-funtcion)
     (define-key helm-cscope-mode-map (kbd "M-s") 'helm-cscope-select)))
#+END_SRC
** swiper + swiper-helm
*** description
    github repo : https://github.com/abo-abo/swiper
    ivy + swiper + counsel in an alternative for isearch, M-x, switech buffer etc.

    find-file is not bound to counsel-find-file. That behaviour is
    kept to ido-find-file. Reason for that is, search & find
    capability of ido-find-file. e.g. say you type: '.org';
    counsel-find-file will search .org file within the dir but
    ido-find-file will search the database for the same. Similar
    action can be obtained by counsel-locate. I like the ido feature
    of finding file with search if not found in the dir.

*** codes
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-s" 'swiper-helm)

#+END_SRC

** perforce (p4)
*** Key combo
 |-----------+---------------------------------|
 | key combo | effect                          |
 |-----------+---------------------------------|
 | C-x p e   | Perforce edit                   |
 |-----------+---------------------------------|

*** codes
#+BEGIN_SRC emacs-lisp
(require 'p4)
(p4-set-client-name "your-user")
(p4-set-p4-port "your-port")
;; -diff
(defun command-line-diff (switch)
  (let ((file1 (pop command-line-args-left))
        (file2 (pop command-line-args-left)))
    (ediff file1 file2)))
(add-to-list 'command-switch-alist '("-diff" . command-line-diff))

;; -merge
(defun command-line-merge (switch)
  (let ((base (pop command-line-args-left))
        (sccs (pop command-line-args-left))
        (mine (pop command-line-args-left))
        (merg (pop command-line-args-left)))
   (ediff-merge-with-ancestor sccs mine base () merg)))
(add-to-list 'command-switch-alist '("-merge" . command-line-merge))
#+END_SRC

** iedit

https://www.emacswiki.org/emacs/Iedit

#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC

;;** paredit
;;#+BEGIN_SRC emacs-lisp
;;(require 'paredit)
;;(paredit-mode 1)
;;#+END_SRC

* keybindings
** codes
#+BEGIN_SRC emacs-lisp
(global-set-key [(f6)] 'eshell)
(global-set-key [(ctrl tab)] 'other-window)
(global-set-key (kbd "C-?") 'hippie-expand)
(global-set-key (kbd "M-D") 'backward-kill-word)
(global-set-key (kbd "DEL") 'backward-delete-char)
(global-set-key (kbd "C-z") 'replace-string)
(global-set-key (kbd "C-M-z") 'replace-regex)
(global-set-key (kbd "C-Z") 'count-matches)
(global-set-key [(ctrl a)] 'back-to-indentation)
(global-set-key (kbd "<prior>") 'beginning-of-defun)
(global-set-key (kbd "<next>") 'end-of-defun)
(global-set-key [(ctrl n)] 'goto-line)


;; Mouse
(unless (display-graphic-p)
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode nil)
  )


#+END_SRC

* themes
;;** exotica
;;Vibrant colored dark theme.
;;
;;#+BEGIN_SRC emacs-lisp
;;(load-theme 'exotica t)
;;#+END_SRC

* Back to Basic
** key combo

   These are some basic key combo in emacs.

 |-----------+---------------------------------|
 | key combo | effect                          |
 |-----------+---------------------------------|
 | C-f       | forward char                    |
 | C-b       | backward char                   |
 | C-n       | next line                       |
 | C-p       | previous line                   |
 | C-a       | beginging of line               |
 | C-e       | end of line                     |
 | C-x [     | forward one page                |
 | C-x ]     | backward one page               |
 |-----------+---------------------------------|
 | M-f       | forward word                    |
 | M-b       | backward word                   |
 | M-m       | first non whitespace            |
 | M-}       | move beginging of a paragraph   |
 | M-{       | move beginging of a paragraph   |
 | M-a       | move beginging of a sentence    |
 | M-e       | move beginging of a sentence    |
 | M-<       | move to begining of buffer      |
 | M->       | move to end of buffer           |
 |-----------+---------------------------------|
 | C-M-f     | forward s-expression            |
 | C-M-b     | backward s-expression           |
 | C-M-d     | move down to a list             |
 | C-M-u     | move up out of list             |
 | C-M-n     | move to next list               |
 | C-M-p     | move to previous list           |
 | C-M-a     | move to begining of defun       |
 | C-M-e     | move to end of defun            |
 |-----------+---------------------------------|
 | C-v       | scroll down one page            |
 | M-v       | scroll up one page              |
 | C-M-v     | scroll down other window        |
 | C-M-S-v   | scroll up other window          |
 |-----------+---------------------------------|
 | C-x r m   | set a bookmark                  |
 | C-x r l   | list a bookmark                 |
 | C-x r b   | jump to a bookmark              |
 |-----------+---------------------------------|
 | C-x r n   | store number in resistor        |
 | C-x r s   | store region in resistor        |
 | C-x r SPC | store point in resistor         |
 | C-x r +   | increment content in resistor   |
 | C-x r j   | jump to resistor                |
 | C-x r i   | insert content of resistor      |
 | C-x r w   | store window config in resistor |
 | C-x r f   | store frameset in resistor      |
 |-----------+---------------------------------|
 | C-SPC     | mark the region                 |
 | C-u C-SPC | Jump to mark                    |
 | C-x C-x   | exchanges mark & point          |
 |-----------+---------------------------------|
 | M-h       | Mark Next paragraph             |
 | C-x h     | Mark whole buffer               |
 | C-M-h     | mark next defun                 |
 | C-x C-p   | mark next page                  |
 | M-@       | mark next word                  |
 | C-M-@     | mark next s expression          |
 |-----------+---------------------------------|


