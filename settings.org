*Emacs Configuration* -by A7d
* debug
#+begin_src emacs-lisp :tangle yes
(setq package-check-signature nil)
(setq debug-on-error nil)
#+end_src

* package-archives
#+begin_src emacs-lisp :tangle yes
(package-initialize nil)
(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(setq package-archive-priorities '(("org" . 3)
                                   ("melpa" . 2)
                                   ("gnu" . 1)))
;(package-refresh-contents)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-verbose t)
(eval-when-compile
  (require 'use-package))
(use-package diminish :ensure t)
#+end_src

* misc
#+begin_src emacs-lisp :tangle yes 
(setq save-interprogram-paste-before-kill t)
(setq ag-highlight-search t)

(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-frame-maximized)
  (display-battery-mode 1)
  )
(blink-cursor-mode -1)

(use-package undo-tree
  :ensure t
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t))
  :diminish undo-tree-mode)

(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
(winner-mode 1)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq make-backup-files nil)
(display-time-mode 1)
(setq column-number-mode t)
(global-hl-line-mode 1)
(electric-pair-mode 1)
(show-paren-mode 1)
(savehist-mode 1)
(global-auto-revert-mode 1)
(global-visual-line-mode 1)
(size-indication-mode 1)
(set-language-environment "UTF-8")
(setq case-fold-search t) ;;I-Search case insensitive
(global-linum-mode t)
(global-unset-key (kbd "C-z"))
(put 'upcase-region 'disabled nil)

;; goto begin/end if defun(Meta-PageUP/Meta-PageDown)
(global-set-key (kbd "ESC <prior>") 'beginning-of-defun)
(global-set-key (kbd "ESC <next>") 'end-of-defun)
(global-set-key (kbd "M-<prior>") 'beginning-of-defun)
(global-set-key (kbd "M-<next>") 'end-of-defun)


(global-set-key (kbd "C-?") 'hippie-expand)
(use-package ws-butler
  :ensure t
  :diminish ws-butler-mode
  :config
  (progn
    (ws-butler-global-mode)
    (setq ws-butler-keep-whitespace-before-point nil)))
#+end_src

* transient
#+begin_src emacs-lisp :tangle yes
  (use-package transient
    :ensure t
  )
#+end_src

* company
#+begin_src emacs-lisp :tangle yes
(use-package company
  :ensure t
  :defer t
  :init (global-company-mode)
  :config
  (progn
    ;; Use Company for completion
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)

    (setq company-tooltip-align-annotations t
          ;; Easy navigation to candidates with M-<n>
          company-show-numbers t)
    (setq company-dabbrev-downcase nil))
  :diminish company-mode)


(use-package company-quickhelp          ; Documentation popups for Company
  :ensure t
  :defer t
  :init (add-hook 'global-company-mode-hook #'company-quickhelp-mode))

(use-package company-go
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-go)))

#+end_src

* dired
#+begin_src emacs-lisp :tangle yes
(use-package dired
  :commands dired-mode
  :bind (:map dired-mode-map ("C-o" . dired-omit-mode))
  :config
  (progn
    (setq dired-dwim-target t)
    (setq-default dired-omit-mode t)
    (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")
    (define-key dired-mode-map "i" 'dired-subtree-insert)
    (define-key dired-mode-map ";" 'dired-subtree-remove)))
(use-package dired-subtree
  :ensure t
  :commands (dired-subtree-insert))
#+end_src

* Mouse
#+begin_src emacs-lisp :tangle yes
  (unless (display-graphic-p)
    (require 'mouse)
    (xterm-mouse-mode t)
    (global-set-key [mouse-4] '(lambda ()
                                (interactive)
                                (scroll-down 1)))
    (global-set-key [mouse-5] '(lambda ()
                                (interactive)
                                (scroll-up 1)))
    (defun track-mouse (e))
    (setq mouse-sel-mode nil)
  )
#+end_src
* gui
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (column-number-mode t)
  (use-package all-the-icons
    :ensure t)
  (use-package atom-one-dark-theme
      :ensure t
      :config
      (progn
        (load-theme 'atom-one-dark t)))
  (use-package smart-mode-line
    :ensure t)
  (use-package smart-mode-line-atom-one-dark-theme
    :after (smart-mode-line)
    :ensure t
    :config
    (progn
      (setq sml/theme 'atom-one-dark)
      (setq sml/no-confirm-load-theme t)
      (sml/setup)))
  (use-package powerline
    :disabled
    :ensure t
    :init
    (setq powerline-arrow-shape 'curve)
    (setq powerline-default-separator-dir '(right . left)))
#+end_src
* org
#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure t
  :mode ("\\.org\\'" . org-mode)
  :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda)
         ("C-c b" . org-iswitchb)
         ("C-c C-w" . org-refile)
         ("C-c j" . org-clock-goto)
         ("C-c C-x C-o" . org-clock-out))
  :config
  (progn
    ;; The GTD part of this config is heavily inspired by
    ;; https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
    (setq org-directory "~/org")
    (setq org-agenda-files
          (mapcar (lambda (path) (concat org-directory path))
                  '("/org.org"
                    "/gtd/gtd.org"
                    "/gtd/inbox.org"
                    "/gtd/tickler.org")))
    (setq org-log-done 'time)
    (setq org-src-fontify-natively t)
    (setq org-use-speed-commands t)
    (setq org-capture-templates
          '(("t" "Todo [inbox]" entry
             (file+headline "~/org/gtd/inbox.org" "Tasks")
             "* TODO %i%?")
            ("T" "Tickler" entry
            (file+headline "~/org/gtd/tickler.org" "Tickler")
             "* %i%? \n %^t")))
    (setq org-refile-targets
          '(("~/org/gtd/gtd.org" :maxlevel . 3)
            ("~/org/gtd/someday.org" :level . 1)
            ("~/org/gtd/tickler.org" :maxlevel . 2)))
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
    (setq org-agenda-custom-commands
          '(("@" "Contexts"
             ((tags-todo "@email"
                         ((org-agenda-overriding-header "Emails")))
              (tags-todo "@phone"
                         ((org-agenda-overriding-header "Phone")))))))
    (setq org-clock-persist t)
    (org-clock-persistence-insinuate)
    (setq org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))))
(use-package org-inlinetask
  :bind (:map org-mode-map
              ("C-c C-x t" . org-inlinetask-insert-task))
  :after (org)
  :commands (org-inlinetask-insert-task))
(use-package org-bullets
  :disabled
  :ensure t
  :commands (org-bullets-mode)
  :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

* bindings
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-;") 'comment-dwim-line)
;; expand-region
  (pending-delete-mode t)
  (use-package expand-region
    :ensure t
    :commands (er/expand-region
               er/mark-inside-pairs
               er/mark-inside-quotes
               er/mark-outside-pairs
               er/mark-outside-quotes
               er/mark-defun
               er/mark-comment
               er/mark-text-sentence
               er/mark-text-paragraph
               er/mark-word
               er/mark-url
               er/mark-email
               er/mark-symbol))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x C-r") 'revert-buffer)
#+end_src

* ace
  https://github.com/abo-abo/ace-window
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window))
#+end_src
* golden-ratio
  https://github.com/roman/golden-ratio.el
#+begin_src emacs-lisp :tangle yes
  (use-package golden-ratio
  :ensure t
  :disabled
  :after (ace-window)
  :config
  (progn
    (setq golden-ratio-auto-scale t)
    (golden-ratio-mode 1)
    (add-to-list 'golden-ratio-extra-commands 'ace-window)))
#+end_src
* auctex
#+begin_src emacs-lisp :tangle yes
(use-package tex
  :disabled
  :ensure auctex
  :mode ("\\.tex\\'" . LaTeX-mode)
  :config
  (setq TeX-view-program-list
        '(("zathura"
          ("zathura" (mode-io-correlate "-sync.sh")
           " "
          (mode-io-correlate "%n:1:%b ")
           "%o"))))
  (setq TeX-view-program-selection '((output-pdf "zathura")))
  (setq TeX-PDF-mode t)
  (TeX-source-correlate-mode))
#+end_src

* indentation
#+begin_src emacs-lisp :tangle yes
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
#+end_src

* lisp
#+begin_src emacs-lisp :tangle yes
(use-package lisp-mode
  :mode "\\.smt2\\'"
  :init
  (progn
    (use-package elisp-slime-nav
      :diminish elisp-slime-nav-mode
      :ensure t
      :commands turn-on-elisp-slime-nav-mode)
    (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook eval-expression-minibuffer-setup-hook))
      (add-hook hook 'turn-on-elisp-slime-nav-mode))
    (use-package eldoc
      :diminish eldoc-mode
      :commands turn-on-eldoc-mode
      :init
      (progn
        (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))))
#+end_src

* flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :commands (flycheck-mode)
    :config
    (progn
      (global-flycheck-mode)
      (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-gcc flycheck-rtags))
      (setq flycheck-emacs-lisp-load-path 'inherit)
      (setq flycheck-verilog-verilator-executable "invoke_verilator.sh"))
    :init
      (add-hook 'coq-mode-hook (lambda () (flycheck-mode -1))))
  (use-package flycheck-package
    :ensure t)
#+end_src

* browser
#+begin_src emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-xdg-open)
#+end_src
* gdb
#+begin_src emacs-lisp :tangle yes
  (setq gdb-many-windows t)
#+end_src
* yasnippet
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-minor-mode
    :ensure t
    :config
    (yas-global-mode t)
    :init
    (setq yas-alias-to-yas/prefix-p nil))
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

* symlinks
#+begin_src emacs-lisp :tangle yes
  (setq vc-follow-symlinks t)
#+end_src
* magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :commands magit-status
    :config
    (progn
      (magit-auto-revert-mode 1)
      (setq magit-completing-read-function 'ivy-completing-read))
    :init
    (add-hook 'magit-mode-hook 'magit-load-config-extensions))
  (use-package magithub
    :after magit
    :disabled
    :ensure t
    :config (magithub-feature-autoinject t))
#+end_src

* pkgbuild
#+begin_src emacs-lisp :tangle yes
  (use-package pkgbuild-mode
    :ensure t
    :mode "/PKGBULD$")
#+end_src

* ediff
#+begin_src emacs-lisp :tangle yes
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src

* json
#+begin_src emacs-lisp :tangle yes
  (use-package json-mode
    :mode "\\.json\\'"
    :ensure t)
#+end_src

* c/c++
#+begin_src emacs-lisp :tangle yes
  (use-package cc-mode
    :mode (("\\.cpp\\'" . c++-mode)
           ("\\.c\\'" . c-mode))
    :init
    (progn
      (defun remap-fill-paragraph () (define-key c++-mode-map [remap c-fill-paragraph] #'clang-format-buffer))
      (defun remap-fill-paragraph-c () (define-key c-mode-map [remap c-fill-paragraph] #'clang-format-buffer))
      (add-hook 'c++-mode-hook 'remap-fill-paragraph)
      (add-hook 'c-mode-hook 'remap-fill-paragraph-c))
    :config
    (progn
      (setq c-basic-offset 4)))
  (use-package cc-styles
    :disabled
    :config
    (progn
      (c-set-offset 'inextern-lang 0)))
  (use-package clang-format
    :ensure t
    :commands (clang-format-buffer))
#+end_src

* rainbow
  https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

* spell checking
#+begin_src emacs-lisp :tangle yes
  (use-package ispell
    :config
    (progn
      (setq ispell-program-name (executable-find "hunspell"))
      (setq ispell-dictionary "en_US")
      (setq ispell-tex-skip-alists
            (list
             (append
              (car ispell-tex-skip-alists)
              '(("\\\\autocite"   ispell-tex-arg-end)
                ("\\\\autocites"  ispell-tex-arg-end)))
             (cadr ispell-tex-skip-alists)))))
  (use-package flyspell-correct-ivy
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode-map
                ("C-;" . flyspell-correct-previous-word-generic)))
  (use-package langtool
    :ensure t
    :config
    (progn
      (setq langtool-bin "/usr/bin/languagetool")
      (setq langtool-default-language "en-US")))
#+end_src
* docker
  https://github.com/Silex/docker.el
#+begin_src emacs-lisp :tangle yes
  (use-package docker
  :ensure t)
#+end_src
* perforce(p4)
  https://github.com/gareth-rees/p4.el
#+begin_src emacs-lisp :tangle yes
  ;; -diff
  (defun command-line-diff (switch)
    (let ((file1 (pop command-line-args-left))
          (file2 (pop command-line-args-left)))
      (ediff file1 file2)))

  ;; -merge
  (defun command-line-merge (switch)
    (let ((base (pop command-line-args-left))
          (sccs (pop command-line-args-left))
          (mine (pop command-line-args-left))
          (merg (pop command-line-args-left)))
     (ediff-merge-with-ancestor sccs mine base () merg)))

  (define-transient-command perforce-command-map()
    ["=== Perforce Commands ==="
     [("e" "Check-Out"                    p4-edit)
      ("a" "Mark For Add"                 p4-add)
      ("d" "Diff"                         p4-ediff)
      ("r" "Revert"                       p4-revert)]
     [("C" "Create CL"                    p4-change)
      ("D" "Describe"                     p4-describe)
	  ("O" "Show Opened-files"            p4-opened)]
     [("b" "Blame"                        p4-blame)
      ("l" "Blame-Line"                   p4-blame-line)]
     [("f" "Find In Depot"                p4-depot-find-file)]

     [("i" "Log-In"                       p4-login)
      ("o" "Log-Out"                      p4-logout)]
     [("<f4>" "Cancel"                    transient-quit-one)]])

  (use-package p4
  :ensure t
  :after (transient)
  :config
  (progn
    (p4-set-client-name "a7-miata")
    (p4-set-p4-port "ssl:ixin-cm-vmp4proxy:1999")
    ;(p4-set-p4-port "ssl:uscal-cm-p4-1:1666")
    (add-to-list 'command-switch-alist '("-diff" . command-line-diff))
    (add-to-list 'command-switch-alist '("-merge" . command-line-merge)))
    (global-set-key [(f4)] 'perforce-command-map))
#+end_src
* helm
  https://github.com/emacs-helm/helm
  https://github.com/ShingoFukuyama/helm-swoop
  https://github.com/syohex/emacs-helm-ag
#+begin_src emacs-lisp :tangle yes
  (define-transient-command help-command-map()
    ["=== Help Commands ==="
     [("m" "man Pages"                               helm-man-woman)
      ("b" "Display all Keybindings"                 describe-bindings)
      ("k" "Describe Keybindings"                    describe-key)]
     [("<f1>" "Cancel"                               transient-quit-one)]])

  (define-transient-command file-command-map()
    ["=== File Commands ==="
     [("f" "Find File"           helm-for-files)
      ("o" "Open File"           helm-find-files)
      ("t" "Show Tree"           neotree-toggle)]
     [("s" "Save"                save-buffer)]
     [("b" "Show buffers"        helm-buffers-list)]
     [("k" "Kill Buffer"         kill-buffer)
      ("x" "Exit Emacs"          save-buffers-kill-terminal)]
     [("<f2>" "Cancel"           transient-quit-one)]])

  (define-transient-command search-command-map()
    ["=== Search Commands ==="
     [("f" "Find in File"            helm-swoop)
      ("a"  "Find in All Files"      helm-multi-swoop-all)]
     [("g"  "Do Grep"                helm-ag)]
     [("n"  "Goto Line"              goto-line)
      ("b"  "Goto Begin"             beginning-of-buffer)
      ("e"  "Goto End"               end-of-buffer)]
     [("m"  "Manage BookMark"        helm-bookmarks)]
     [("<f3>" "Cancel"               transient-quit-one)]])

  (use-package helm
  :ensure t
  :after (transient)
  :config
  (progn
    (helm-mode 1)
    (setq helm-recentf-fuzzy-match    t)
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-split-window-in-side-p t)
    (setq helm-autoresize-max-height 50)
    (setq helm-autoresize-min-height 30)
    (helm-autoresize-mode 1)
    (global-set-key [(meta x)] 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key [(f7)] 'helm-semantic)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key [(f1)] 'help-command-map)
    (global-set-key [(f2)] 'file-command-map)))

  (use-package helm-swoop
  :ensure t
  :after (:all transient helm)
  :config (setq helm-swoop-speed-or-color t))

  (use-package helm-ag
  :ensure t
  :after (:all transient helm helm-swoop)
  :config
  (progn
    (global-set-key [(f3)] 'search-command-map)
    (define-key global-map (kbd "C-\\") 'helm-resume)))
#+end_src
* smart-mode-line
  https://github.com/tuhdo/semantic-stickyfunc-enhance
#+begin_src emacs-lisp :tangle yes
  (use-package stickyfunc-enhance
  :ensure t
  :init
  (progn
    (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
    (semantic-mode 1)))
#+end_src
* auto-highlight-symbol
  https://github.com/mhayashi1120/auto-highlight-symbol-mode
#+begin_src emacs-lisp :tangle yes
  (use-package auto-highlight-symbol
  :ensure t
  :config
  (progn
    (global-auto-highlight-symbol-mode t)
    (define-key auto-highlight-symbol-mode-map (kbd "M-p") 'ahs-backward)
    (define-key auto-highlight-symbol-mode-map (kbd "M-n") 'ahs-forward)
    (setq ahs-idle-interval 0) ;; if you want instant highlighting, set it to 0, but I find it annoying
    (setq ahs-default-range 'ahs-range-whole-buffer) ;; highlight every occurence in buffer

    ;; inhibits highlighting in specific places, like in comments
    (setq ahs-inhibit-face-list '(font-lock-comment-delimiter-face
                                font-lock-comment-face
                                font-lock-doc-face
                                font-lock-doc-string-face
                                font-lock-string-face))))
#+end_src
* helm-gtags
#+begin_src emacs-lisp :tangle yes
  (define-transient-command tags-command-map()
    ["=== TAGS Commands ==="
     [("s" "Find Symbol"                  helm-gtags-find-symbol)
      ("f" "Find Files"                   helm-gtags-find-files)
      ("r" "Find Reference"               helm-gtags-find-rtag)
      ("p" "Find Pattern"                 helm-gtags-find-pattern)]
     [("]" "GOTO Definition/File"         helm-gtags-dwim)
      ("[" "Pop Stack"                    helm-gtags-pop-stack)]
     [("<f12>" "Cancel"                   transient-quit-one)]])

;; this variables must be set before load helm-gtags
;; you can change to any prefix key of your choice
;;(setq helm-gtags-prefix-key "\C-cg")

(use-package helm-gtags
  :after (helm)
  :ensure t
  :init
  (progn
    (setq helm-gtags-ignore-case t
          helm-gtags-auto-update t
          helm-gtags-use-input-at-cursor t
          helm-gtags-pulse-at-cursor t
          helm-gtags-prefix-key "\C-cg"
          helm-gtags-suggested-key-mapping t)

    ;; Enable helm-gtags-mode in Dired so you can jump to any tag
    ;; when navigate project tree with Dired
    (add-hook 'dired-mode-hook 'helm-gtags-mode)

    ;; Enable helm-gtags-mode in Eshell for the same reason as above
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)

    ;; Enable helm-gtags-mode in languages that GNU Global supports
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'java-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)

    (global-set-key [(f12)] 'tags-command-map)

    ;; key bindings
    (with-eval-after-load 'helm-gtags
      (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
      (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
      (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
      (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))))

(provide 'setup-helm-gtags)
#+end_src
* darkroom
  https://github.com/joaotavora/darkroom
#+begin_src emacs-lisp :tangle yes
  (use-package darkroom
  :ensure t
  :disabled
  :bind ("M-<f12>" . darkroom-tentative-mode))
#+end_Src
* neotree
  https://github.com/jaypei/emacs-neotree
#+begin_src emacs-lisp :tangle yes
  (use-package neotree
  :ensure t
  :bind ("C-<f12>" . neotree-toggle)
  :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src
* scons
  https://github.com/SCons/scons/wiki/IDEIntegration
#+begin_src emacs-lisp :tangle yes
 (setq auto-mode-alist
      (cons '("SConstruct" . python-mode) auto-mode-alist))
 (setq auto-mode-alist
      (cons '("SConscript" . python-mode) auto-mode-alist))
#+end_src
* Matching Braces

M-C-a jumps to the beginning of the current function.
M-C-e jumps to the end of the current function

#+begin_src emacs-lisp :tangle yes
 (global-set-key (kbd "M-%") 'match-paren)
 (defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
#+end_src
* Window
#+begin_src emacs-lisp :tangle yes
 (defun split-windows-horizontally-evenly ()
  (interactive)
  (command-execute 'split-window-vertically)
  (command-execute 'balance-windows)
)

 (defun split-windows-vertically-evenly ()
  (interactive)
  (command-execute 'split-window-horizontally)
  (command-execute 'balance-windows)
)
 (defun delete-window-and-balance()
  (interactive)
  (command-execute 'delete-window)
  (command-execute 'balance-windows)
)

  (define-transient-command window-command-map()
    ["=== Window Commands ==="
     [("v" "Split Vertically"             split-windows-vertically-evenly)
      ("h" "Split Horizontally"           split-windows-horizontally-evenly)]
     [("b" "Balance Windows"              balance-windows)
      ("x" "Close Window"                 delete-window-and-balance)]
     [("<f5>" "Cancel"                    transient-quit-one)]])

(global-set-key [(f5)] 'window-command-map)
#+end_src
